CSS Selectors - Locators

https://www.browserstack.com/guide/css-selectors-in-selenium

What is a CSS Selector?

CSS (Cascading Style Sheets) Selectors in Selenium are used to identify and locate web elements based on their id,
class, name, attributes and other attributes. CSS is a preferred locator strategy as it is simpler to write and 
faster as compared to XPath.

By.cssSelector(String cssSelector) method is used to locate the elements in Selenium WebDriver. This method accepts
a CSS Selector String as an argument which defines the selection method for the web elements.

The CSS Selector combines an element selector and a selector value that can identify particular elements on a web
page. Like XPath in Selenium, CSS selectors can locate web elements without ID, class, or Name.

Types of CSS Selectors in Selenium (with Examples)

There are five types of CSS Selectors in Selenium tests:

1. ID
2. Class
3. Attribute
4. Sub-String
5. Inner String

https://www.w3schools.com/css/css_selectors.asp

CSS selectors are used to "find" (or select) the HTML elements you want to style.

We can divide CSS selectors into five categories:

1. Simple selectors (select elements based on name, id, class)
2. Combinator selectors (select elements based on a specific relationship between them)
3. Pseudo-class selectors (select elements based on a certain state)
4. Pseudo-elements selectors (select and style a part of an element)
5. Attribute selectors (select elements based on an attribute or attribute value)

All CSS Simple Selectors

Selector			Example		Example description
#id					#firstname	Selects the element with id="firstname"
.class				.intro		Selects all elements with class="intro"
element.class		p.intro		Selects only <p> elements with class="intro"
*					*			Selects all elements
element				p			Selects all <p> elements
element,element,..	div, p		Selects all <div> elements and all <p> elements

=============== Kumar Notes ======================

html[attribute = value]
if there is a class name with a single value

if there is a class name with compounded values

a[class = signin]
a.signin
.signin

html[attribute = value]
htmltag.value
.value

html.value1.value2
a.moneyicon.relative
.moneyicon.relative

what if you have an id
html[attribute = value]
input[id = login1]

html#value
input#login1
#login1

in case of traversing between siblings just use a +
in case of traversing to a descendant  just use a (space) 

div#div_login_error + div > div:nth-child(1) > div:nth-child(1) + div > input#login1:nth-child(1)
div#div_login_error + div > div:nth-of-type(1) > div:nth-of-type(1) + div > input#login1:nth-of-type(1)
nth-child
nth-of-type

div#div_login_error + div input#login1
div.floatL.leftwidth input#login1 

=============== Personal Notes ===================

Page: rediff.com

html[attribute = value]

if there is a class name with a single value

if there is a class name with compounded values

a[class = signin]
a.signin
.signin

html[attribute = value]
htmltag.value
.value

html1.value1.value2
a.moneyicon.relative
.moneyicon.relative

what if you have an id
html[attribute = value]
input[id = login1]
input#login1

div#div_login_error + div // Transcend
div#div_login_error + div > div:nth-child(1) > div:nth-child(1) + div input#login1 (login1 element)
Understand + (Sibling) and > (Child) sign
div#div_login_error + div > div:nth-child(1) > div:nth-child(1) + div input#login1:nth-child(1) - (Long)
div.floatL.leftwidth input#login1 - (short)
div.cell input#login1 (Same outcome)

https://www.selenium.dev/documentation/webdriver/elements/locators/

Locator strategies

Ways to identify one or more specific elements in the DOM.

A locator is a way to identify elements on a page. It is the argument passed to the Finding element methods.

Traditional Locators

Selenium provides support for these 8 traditional location strategies in WebDriver:

Locator				Description
class name			Locates elements whose class name contains the search value (compound class names are not permitted)
css selector		Locates elements matching a CSS selector
id					Locates elements whose ID attribute matches the search value
name				Locates elements whose NAME attribute matches the search value
link text			Locates anchor elements whose visible text matches the search value
partial link text	Locates anchor elements whose visible text contains the search value. If multiple elements are matching, only the first one will be selected.
tag name			Locates elements whose tag name matches the search value
xpath				Locates elements matching an XPath expression

Relative Locators

Selenium 4 introduces Relative Locators (previously called Friendly Locators). These locators are helpful when it 
is not easy to construct a locator for the desired element, but easy to describe spatially where the element is 
in relation to an element that does have an easily constructed locator.

How it works

Selenium uses the JavaScript function getBoundingClientRect() to determine the size and position of elements on 
the page, and can use this information to locate neighboring elements.

Relative locator methods can take as the argument for the point of origin, either a previously located element 
reference, or another locator. In these examples we’ll be using locators only, but you could swap the locator in 
the final method with an element object and it will work the same.

Available relative locators

Above
If the email text field element is not easily identifiable for some reason, but the password text field element 
is, we can locate the text field element using the fact that it is an “input” element “above” the password 
element.

Below
If the password text field element is not easily identifiable for some reason, but the email text field element 
is, we can locate the text field element using the fact that it is an “input” element “below” the email element.

Left of
If the cancel button is not easily identifiable for some reason, but the submit button element is, we can locate 
the cancel button element using the fact that it is a “button” element to the “left of” the submit element.

Right of
If the submit button is not easily identifiable for some reason, but the cancel button element is, we can locate 
the submit button element using the fact that it is a “button” element “to the right of” the cancel element.

Near
If the relative positioning is not obvious, or it varies based on window size, you can use the near method to 
identify an element that is at most 50px away from the provided locator. One great use case for this is to work 
with a form element that doesn’t have an easily constructed locator, but its associated input label element does.

Chaining relative locators
You can also chain locators if needed. Sometimes the element is most easily identified as being both above/below 
one element and right/left of another.