6 main pillars/components/concepts of OOPs (Object Oriented Programming)

1. Classes, 2. Objects/Methods, 3. Inheritance, 4. Polymorphism, 5. Abstraction, 6. Encapsulation

https://www.geeksforgeeks.org/classes-objects-java/

1. Classes - A class in Java is a set of objects which shares common characteristics/ behavior and common 
properties/ attributes. It is a user-defined blueprint or prototype from which objects are created. For example, 
Student is a class while a particular student named Ravi is an object.

In Java, classes and objects are basic concepts of Object Oriented Programming (OOPs) that are used to represent 
real-world concepts and entities. The class represents a group of objects having similar properties and behavior. 
For example, the animal type Dog is a class while a particular dog named Tommy is an object of the Dog class.

Properties of Java Classes

Class is not a real-world entity. It is just a template or blueprint or prototype from which objects are created.
Class does not occupy memory.
Class is a group of variables of different data types and a group of methods.
A Class in Java can contain:

1. Data member
2. Method
3. Constructor
4. Nested Class
5. Interface

Components of Java Classes

In general, class declarations can include these components, in order: 
 
1. Modifiers: A class can be public or has default access (Refer this for details).
2. Class keyword: class keyword is used to create a class.
3. Class name: The name should begin with an initial letter (capitalized by convention).
4. Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A 
class can only extend (subclass) one parent.
5. Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the 
keyword implements. A class can implement more than one interface.
6. Body: The class body is surrounded by braces, { }.

Constructors are used for initializing new objects. Fields are variables that provide the state of the class and 
its objects, and methods are used to implement the behavior of the class and its objects.

Java Objects

An object in Java is a basic unit of Object-Oriented Programming and represents real-life entities. Objects are
the instances of a class that are created to use the attributes and methods of a class.  A typical Java program 
creates many objects, which as you know, interact by invoking methods. An object consists of : 

State: It is represented by attributes of an object. It also reflects the properties of an object.
Behavior: It is represented by the methods of an object. It also reflects the response of an object with other 
objects.
Identity: It gives a unique name to an object and enables one object to interact with other objects.

Objects correspond to things found in the real world. For example, a graphics program may have objects such as 
“circle”, “square”, and “menu”. An online shopping system might have objects such as “shopping cart”, “customer”, 
and “product”.  

Declaring Objects (Also called instantiating a class)

When an object of a class is created, the class is said to be instantiated. All the instances share the attributes
and the behavior of the class. But the values of those attributes, i.e. the state are unique for each object. A 
single class may have any number of instances.

Initializing a Java object

The new operator instantiates a class by allocating memory for a new object and returning a reference to that 
memory. The new operator also invokes the class constructor. 
